Notes made on making the game 'Alien Invasion'

In Python, 'self' is a reference to the current instance of the class. It is used inside class methods to access the instance’s attributes and other methods. When you write 'self.attribute' or 'self.method()', you are referring to the data and functions that belong to that specific object.
'self' is given as the first parameter in every instance method of a class, but do not have to include while calling the method.
* You start out writing your code as simply as possible, and then refactor it as your project beomes more complex.

Terms:
1. Object: It is a collection of data (attributes) and functions (methods) that are bundled together. They are created from classes, which are like blueprints for what the object should be and do.
2. Game elements: Specific objects in the game, like an alien or a ship.
3. Screen: The main display surface; the window or area where all your game graphics are drawn and shown to the player.
4. Surface: A part of the screen where a game element can be displayed. Each element in the game is its own surface.
5. Load: Reads an image file from disk and creates a Surface object in memory. The original file is not changed; you work with the Surface in your code. The image is copied.
6. Draw: Copying a surface's pixels onto another surface (usually the screen). It is not loading from disk.
7. Event: An action that the user performs while playing the game, such as pressing a key or moving the mouse.
8. Event loop: A loop written to listen for events and perform appropriate tasks depending on the kinds of events that occur.
9. Rect object: A special object that represents a rectangle. It store information about the rectangle's position (x and y coordinates) and its size (width and height).
10. Helper method: A function defined inside a class that performs a specific, often small or repetitive tast to support other methods in the class. They work inside a cleass but isn't meant to be used by code outside the class. In Python, a single leading underscore indicaes a helper method.


Code/Methods:
1. pygame.init() -> initializes the background settings that Pygame needs to work properly.
2. pygame.display.set_mode((<pixels by width>, <pixels by height>)) -> creates a display window on which we draw all the game's graphical elements, while defining the dimensions of the game window in pixels width by height.
3. pygame.display.set_caption("<Title>") -> sets the title of the display window.
4. pygame.event.get() -> returns a list of events that have taken place since the last time it was called - to access the events that Pygame detects.
5. pygame.QUIT -> event where the player clicks the game window's close button.
6. pygame.display.flip() -> tells pygame to make the most recently drawn screen visible.
7. pygame.time.Clock() -> creates an instance of 'Clock' class from the 'pygame.time' module. The object keeps track of how much time has passed between each frame. Also measures time and helps manage the speed of the game.
8. self.clock.tick(<integer for the fps>) -> the tick() method controls how many times the loop runs per second.
9. self.get_rect() -> used to obtain a Rect object that represents the size (width and height) and position (x and y coordinates) of a surface (screen or image). This Rect makes it easy to position, move, and align objects.
10. pygame.image.load('<image address>') -> used to load an image. It returns a surface representing the image.
11. self.rect -> Rectangle that defines the position and size of the image.
12. self.rect.<position> -> is not a new variable, its a built in attribute of the Pygame Rect object.
13. self.rect.<position> = self.screen.get_rect().<position> -> assigns the position and coordinates of midbottom of the screen to the midbottom of the image.
14. self.screen.blit(<image>, <rect>) -> draws the image onto the screen at the position specified by and with rect.
15. pygame.sprite.Group -> Used to efficiently manage, update, and draw multiple instances of the same type of object (such as bullets, aliens, or enemies). When you have more than one of a particular object, grouping them allows you to handle all of them together—updating their positions, drawing them to the screen, and checking for collisions—using built-in methods, rather than managing each object individually.


Drawing Ship to the Screen:
Load the image:
self.image = pygame.image.load('images/ship.bmp')
This loads the ship image into self.image.
Create a rect object:
self.rect = self.image.get_rect()
This creates a Rect object for the image, giving you access to its size and position.
Set the position:
self.rect.midbottom = self.screen.get_rect().midbottom
This moves the ship’s rect so its midbottom aligns with the screen’s midbottom, placing the ship at the bottom center of the window.


Pygame Screen Positions:
1. Centering -> center, centerx, centery
2. Edge -> top, bottom, left, right
3. Edge-Centering -> midbottom, midtop, midleft, midright, topleft, topright, bottomleft, bottomright.


A rect in Pygame is mainly used to position (and move) the image on the screen. It defines where the image will appear and makes it easy to align, move, and detect collisions between game objects.

There are important reasons why the rect takes the size of the image:
Accurate Positioning:
    The rect needs to match the image’s size so you can position the image precisely on the screen. If the rect didn’t match, the image might not appear where you expect.
Collision Detection:
    Rects are often used for collision detection. If the rect matches the image’s size, you can accurately check if two images (sprites) overlap.
Convenience:
    Many Pygame functions and methods expect a rect that matches the image’s size for things like alignment, movement, and drawing.
Even though changing the rect’s size doesn’t scale the image, having the rect match the image’s size by default makes it much easier to manage and interact with game objects. If you do want to change the image’s size, you can scale the image and then get a new rect for the new size.


'Blit' means to copy the pixels from one surface (like an image or sprite) onto another surface (usually the screen) at a specific position. The blit() method is used to draw images or other surfaces onto the display window.


pygame.event.get() vs. pygame.key.get_pressed():
    1. pygame.event.get() is best for handling discrete events like key presses/releases, mouse clicks, or quitting the game. It gives you a list of all events that have occurred since the last call, and you can check the type of each event (e.g., KEYDOWN, KEYUP, QUIT).
    2. pygame.key.get_pressed() is best for checking the current state of all keyboard keys (whether each key is currently being held down). It returns a list of boolean values for every key.
Which to use?
    Use pygame.event.get() if you want to respond to specific events (like a key being pressed or released once).
    Use pygame.key.get_pressed() if you want to check if a key is being held down (for continuous movement, for example).
Often, games use both together:
    pygame.event.get() for quitting, starting, or stopping actions.
    pygame.key.get_pressed() for smooth, continuous movement.


* You can make the ship go 'Auto-run' by making use of movement flag -> turning it True and False within the event.get().


For smooth diagonal movements:
    # Vertical movement
        if keys[pygame.K_UP] and not keys[pygame.K_DOWN]:
            self.rocket.moving_up = True
            self.rocket.moving_down = False
        elif keys[pygame.K_DOWN] and not keys[pygame.K_UP]:
            self.rocket.moving_down = True
            self.rocket.moving_up = False
        else:
            self.rocket.moving_up = False
            self.rocket.moving_down = False

        # Horizontal movement
        if keys[pygame.K_LEFT] and not keys[pygame.K_RIGHT]:
            self.rocket.moving_left = True
            self.rocket.moving_right = False
        elif keys[pygame.K_RIGHT] and not keys[pygame.K_LEFT]:
            self.rocket.moving_right = True
            self.rocket.moving_left = False
        else:
            self.rocket.moving_left = False
            self.rocket.moving_right = False

If keys up is pressed and down is not pressed during the same time, the character will move up and will not move down.
If keys down is pressed and up is not pressed during the same time, the character will move down and will not move up.
If keys right is pressed and left is not pressed during the same time, the character will move right and will not move left.
If keys left is pressed and right is not pressed during the same time, the character will move left and will not move right.
    ^ logic states that the opposite directions are cancelled out, but not the adjacent.
    Due to how the logic is written, the character can move in diagonals.